<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <tx:annotation-driven transaction-manager="jtaTransactionManager" />

    <!-- BEGIN GENERAL ATOMIKOS CONFIGURATION -->

    <!-- Atomikos transaction service. This will initialize such that TransactionManagerImp.getTransactionManager() 
        will not return null. -->
    <bean id="atomikosUserTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
        init-method="init" destroy-method="shutdownForce" />

    <!-- Construct Atomikos UserTransactionManager, needed to configure Spring. 
        Note that UserTransactionManager delegates to TransactionManagerImp.getTransactionManager(). 
        We leave "TransactionManager" out of the name of the bean because some frameworks 
        (Grails, for example) look for beans with "TransactionManager" in the name 
        and expect to find a Spring transaction manager. -->
    <bean id="atomikosUTM" class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close"
        depends-on="atomikosUserTransactionService">

        <property name="startupTransactionService" value="false" />

        <!-- when close is called, should we force transactions to terminate 
            or not? -->
        <property name="forceShutdown" value="false" />
    </bean>

    <!-- Also use Atomikos UserTransactionImp, needed to configure Spring -->
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"
        depends-on="atomikosUserTransactionService">
        <property name="transactionTimeout" value="300" />
    </bean>

    <!-- Configure the Spring framework to use JTA transactions from Atomikos -->
    <bean id="jtaTransactionManager"
        class="org.springframework.transaction.jta.JtaTransactionManager">

        <!-- UserTransactionManager delegates to TransactionManagerImp.getTransactionManager() -->
        <property name="transactionManager" ref="atomikosUTM" />

        <property name="userTransaction" ref="atomikosUserTransaction" />
    </bean>

    <!-- END GENERAL ATOMIKOS CONFIGURATION -->

    <!-- request/reply message producers (at least using temporary queues) 
        can't be transactional. See TemporaryQueueReplyManager.createListenerContainer() 
        and QueueReplyReplyManager.createListenerContainer() where answer.setSessionTransacted() 
        is hard-coded to false. -->
    <bean id="jmsConnectionFactoryForRequestReplyMessageProducer"
        class="org.apache.activemq.spring.ActiveMQConnectionFactory">
        <property name="brokerURL"
            value="vm://localhost?broker.persistent=false&amp;broker.useJmx=false" />
        <property name="redeliveryPolicyMap" ref="amqRedeliveryPolicyMap" />
    </bean>

    <bean id="jmsConnectionFactoryForAtomikos"
        class="org.apache.activemq.spring.ActiveMQXAConnectionFactory">
        <property name="brokerURL"
            value="vm://localhost?broker.persistent=false&amp;broker.useJmx=false" />
        <property name="redeliveryPolicyMap" ref="amqRedeliveryPolicyMap" />
    </bean>
    <bean id="atomikosJmsConnectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean"
        init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="amq1" />
        <property name="xaConnectionFactory" ref="jmsConnectionFactoryForAtomikos" />
        <property name="poolSize" value="20" />
    </bean>

    <bean id="amqRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="0" />
    </bean>

    <bean id="amqRedeliveryPolicyMap"
        class="org.apache.activemq.broker.region.policy.RedeliveryPolicyMap">
        <property name="defaultEntry" ref="amqRedeliveryPolicy" />
    </bean>

    <bean id="CAMEL_PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
        <property name="transactionManager" ref="jtaTransactionManager"/>
    </bean>

    <bean id="redeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="0" />
    </bean>

    <!-- Camel Redelivery Policy -->
    <bean id="camelRedeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="0" />
    </bean>

    <!-- Camel Error Handler Builder -->
    <bean id="camelErrorHandlerBuilder" class="org.apache.camel.builder.DefaultErrorHandlerBuilder">
        <property name="redeliveryPolicy" ref="camelRedeliveryPolicy" />
    </bean>

    <!-- JTA CamelContext -->
    <bean id="jtaCamelContext" class="org.apache.camel.spring.SpringCamelContext" />

    <!-- JTA JmsConfiguration for Camel: used to configure the component -->
    <bean id="jtaJmsConfiguration"
        class="org.apache.activemq.camel.component.ActiveMQConfiguration">
        <property name="connectionFactory" ref="atomikosJmsConnectionFactory" />
        <property name="lazyCreateTransactionManager" value="false" />
        <property name="transactionManager" ref="jtaTransactionManager" />
        <property name="transacted" value="true" />
        <!-- deprecated, but JmsComponent.jmsComponentTransacted() still 
            sets it -->
        <property name="transactedInOut" value="true" />
    </bean>

    <!-- JTA ActiveMQ component for Camel -->
    <bean id="jtaActiveMQComponent"
        class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jtaJmsConfiguration" />
        <property name="camelContext" ref="jtaCamelContext" />
    </bean>
    <!-- and add the component to the context -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
        <property name="targetObject" ref="jtaCamelContext" />
        <property name="targetMethod" value="addComponent" />
        <property name="arguments">
            <array value-type="java.lang.Object">
                <value>activemq</value>
                <ref bean="jtaActiveMQComponent" />
            </array>
        </property>
    </bean>

    <!-- Non-transactional CamelContext -->
    <bean id="ntCamelContext" class="org.apache.camel.spring.SpringCamelContext">
        <property name="errorHandlerBuilder" ref="camelErrorHandlerBuilder" />
    </bean>

    <!-- Non-transactional JmsConfiguration for Camel -->
    <bean id="ntJmsConfiguration"
        class="org.apache.activemq.camel.component.ActiveMQConfiguration">
        <property name="connectionFactory"
            ref="jmsConnectionFactoryForRequestReplyMessageProducer" />
        <property name="lazyCreateTransactionManager" value="false" />
    </bean>

    <!-- Non-transactional ActiveMQ component for Camel -->
    <bean id="ntActiveMQComponent"
        class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="ntJmsConfiguration" />
        <property name="camelContext" ref="ntCamelContext" />
    </bean>
    <!-- and add the component to the context -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
        <property name="targetObject" ref="ntCamelContext" />
        <property name="targetMethod" value="addComponent" />
        <property name="arguments">
            <array value-type="java.lang.Object">
                <value>activemq</value>
                <ref bean="ntActiveMQComponent" />
            </array>
        </property>
    </bean>

    <!-- Non-transactional Producer Template -->
    <bean id="producer"
        class="org.apache.camel.spring.CamelProducerTemplateFactoryBean">
        <property name="camelContext" ref="ntCamelContext" />
    </bean>

    <!-- ReliableTxConsumerBuilder -->
    <bean id="consumerBuilder" class="software.reliabletx.camel.ReliableTxConsumerBuilder">
        <property name="transactionPolicyRefName" value="CAMEL_PROPAGATION_REQUIRED" />
        <property name="transactionManager" ref="jtaTransactionManager" />
    </bean>

    <!-- bean used as a Camel destination in the tests -->
    <bean id="testReceiverBean" class="software.reliabletx.camel.TestReceiverBean">
        <property name="jmsTransactionManager" ref="jtaTransactionManager" />
    </bean>

</beans>
